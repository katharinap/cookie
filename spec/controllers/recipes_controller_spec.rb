require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RecipesController, :type => :controller do

  before(:all) do
    @user = create(:user)
  end
  
  let(:invalid_attributes) {
    {name: ""}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  # creates and returns two ingredient records for the given recipe
  def create_ingredients(recipe, count: 2)
    (1..count).map do |i|
      create :ingredient, recipe_id: recipe.id
    end
  end

  def create_steps(recipe, count: 2)
    (1..count).map do |i|
      create :step, recipe_id: recipe.id
    end
  end

  describe "GET index" do
    it "assigns all recipes as @recipes" do
      Recipe.destroy_all
      recipe = create(:recipe)
      get :index, {}, valid_session
      expect(assigns(:recipes)).to eq([recipe])
    end
  end

  describe "GET show" do
    it "assigns the requested recipe as @recipe" do
      recipe = create(:recipe)
      ingredients = create_ingredients(recipe)
      steps = create_steps(recipe)
      get :show, {:id => recipe.to_param}, valid_session
      expect(assigns(:recipe)).to eq(recipe)
      expect(assigns(:recipe).ingredients).to eq(ingredients)
      expect(assigns(:recipe).steps).to eq(steps)
    end
  end

  describe "GET new" do
    it 'redirects to the sign_in page if the user is not signed in yet' do
      get :new, {}, valid_session
      expect(response).to redirect_to(new_user_session_path)
    end
    
    it "assigns a new recipe as @recipe" do
      sign_in @user
      get :new, {}, valid_session
      expect(response).to render_template("new")
      sign_out @user
    end
  end
  
  describe "GET edit" do
    it 'redirects to the sign_in page if the user is not signed in yet' do
      recipe = create(:recipe)
      get :edit, {:id => recipe.to_param}, valid_session
      expect(response).to redirect_to(new_user_session_path)
    end
    
    it "assigns the requested recipe as @recipe" do
      sign_in @user
      recipe = create(:recipe)
      ingredients = create_ingredients(recipe)
      steps = create_steps(recipe)
      get :edit, {:id => recipe.to_param}, valid_session
      expect(assigns(:recipe)).to eq(recipe)
      expect(assigns(:recipe).ingredients).to eq(ingredients)
      expect(assigns(:recipe).steps).to eq(steps)
    end
  end

  describe "POST create" do

    let(:recipe_attr) do
      attr = { name: attributes_for(:recipe)[:name], user_id: 1 }
      attr[:ingredients] = "ingredient one\ningredient two"
      attr[:steps] = "do something\n\ndo something else" 
      attr[:references] = "http://www.example.com/1\nhttp://www.example.com/2" 
      attr
    end
    
    describe "with valid params" do
      it "creates a new Recipe" do
        expect {
          post :create, attributes_for(:recipe), valid_session
        }.to change(Recipe, :count).by(1)
      end

      it "assigns a newly created recipe as @recipe" do
        post :create, recipe_attr, valid_session
        expect(assigns(:recipe)).to be_a(Recipe)
        expect(assigns(:recipe)).to be_persisted
      end

      it "assigns the ingredients" do
        post :create, recipe_attr, valid_session
        ingredients = assigns(:recipe).ingredients
        expect(ingredients.count).to eq(2)
        expect(ingredients.first).to be_a(Ingredient)
        expect(ingredients.first).to be_persisted
      end

      it "assigns the steps" do
        post :create, recipe_attr, valid_session
        steps = assigns(:recipe).steps
        expect(steps.count).to eq(2)
        expect(steps.first).to be_a(Step)
        expect(steps.first).to be_persisted
      end

      it "assigns the references" do
        post :create, recipe_attr, valid_session
        references = assigns(:recipe).references
        expect(references.count).to eq(2)
        expect(references.first).to be_a(Reference)
        expect(references.first).to be_persisted
      end

      it "redirects to the created recipe" do
        post :create, recipe_attr, valid_session
        expect(response).to redirect_to(Recipe.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved recipe as @recipe" do
        attr = recipe_attr
        attr[:name] = ''
        post :create, attr, valid_session
        expect(assigns(:recipe)).to be_a_new(Recipe)
      end

      it "re-renders the 'new' template" do
        attr = recipe_attr
        attr[:name] = ''
        post :create, attr, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      let(:new_attributes) {
        {name: "New Recipe Name", steps: "lots of steps to follow..."}
      }
      
      it "updates the requested recipe" do
        recipe = create(:recipe)
        ingredient = create_ingredients(recipe, count: 1).first
        step = create_steps(recipe, count: 1).first
        the_params = {:id => recipe.to_param, :recipe => new_attributes.merge({ ingredients_attributes: {ingredient.id.to_s => {id: ingredient.id.to_s, value: "Tofu"}}, steps_attributes: {step.id.to_s => {id: step.id.to_s, description: 'Do something'}}})}
        put :update, the_params, valid_session
        recipe.reload
        expect(assigns(:recipe).name).to eq(new_attributes[:name])
        expect(assigns(:recipe).ingredients.first.value).to eq("Tofu")
        expect(assigns(:recipe).steps.first.description).to eq('Do something')
      end

      it "assigns the requested recipe as @recipe" do
        recipe = create(:recipe)
        ingredient = create_ingredients(recipe, count: 1).first
        step = create_steps(recipe, count: 1).first
        put :update, {:id => recipe.to_param, :recipe => new_attributes.merge({ingredients_attributes: {ingredient.id.to_s => {id: ingredient.id.to_s, value: "Tofu"}}, steps_attributes: {step.id.to_s => {id: step.id.to_s, description: "Do something"}}})}, valid_session
        expect(assigns(:recipe)).to eq(recipe)
        expect(assigns(:recipe).ingredients.size).to eq(1)
        expect(assigns(:recipe).steps.size).to eq(1)
      end

      it "redirects to the recipe" do
        recipe = create(:recipe)
        put :update, {:id => recipe.to_param, :recipe => attributes_for(:recipe)}, valid_session
        expect(response).to redirect_to(recipe)
      end
    end

    describe "with invalid params" do
      it "assigns the recipe as @recipe" do
        recipe = create(:recipe)
        put :update, {:id => recipe.to_param, :recipe => invalid_attributes}, valid_session
        expect(assigns(:recipe)).to eq(recipe)
      end

      it "re-renders the 'edit' template" do
        recipe = create(:recipe)
        put :update, {:id => recipe.to_param, :recipe => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    context 'not signed-in' do
      it 'redirects to the sign_in page if the user is not signed in yet' do
        recipe = create(:recipe)
        delete :destroy, {:id => recipe.to_param}, valid_session
        expect(response).to redirect_to(new_user_session_path)
      end
    end

    context 'signed-in' do
      before(:each) do
        sign_in @user
      end

      after(:each) do
        sign_out @user
      end
      it "destroys the requested recipe" do
        recipe = create(:recipe)
        expect {
          delete :destroy, {:id => recipe.to_param}, valid_session
        }.to change(Recipe, :count).by(-1)
      end

      it "destroys the associated ingredients" do
        recipe = create(:recipe)
        create_ingredients(recipe)
        expect {
          delete :destroy, {:id => recipe.to_param}, valid_session
        }.to change(Ingredient, :count).by(-2)
      end

      it "destroys the associated steps" do
        recipe = create(:recipe)
        create_steps(recipe)
        expect {
          delete :destroy, {:id => recipe.to_param}, valid_session
        }.to change(Step, :count).by(-2)
      end

      it "redirects to the recipes list" do
        recipe = create(:recipe)
        delete :destroy, {:id => recipe.to_param}, valid_session
        expect(response).to redirect_to(recipes_url)
      end
    end
  end
end
